{"ast":null,"code":"import { BehaviorSubject, debounceTime, distinctUntilChanged, filter, map, Subject, switchMap } from 'rxjs';\nimport { YOUTUBE_SEARCH_URL, YOUTUBE_VIDEOS_URL } from 'src/app/shared/constants';\nimport { getYTResponseItemsIdList } from 'src/app/shared/helpers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SearchFormService = /*#__PURE__*/(() => {\n  class SearchFormService {\n    constructor(http) {\n      this.http = http;\n      this.filteringValue$$ = new BehaviorSubject(this.filterInput);\n      this.sortState$$ = new BehaviorSubject(this.sortState);\n      this.currentFilterValue$ = this.filteringValue$$.asObservable();\n      this.currentSortState$ = this.sortState$$.asObservable();\n      this.selectedItem$$ = new BehaviorSubject(this.item);\n      this.currentItem$ = this.selectedItem$$.asObservable();\n      this.searchResults = [];\n      this.searchValue$$ = new Subject();\n    }\n\n    changeCurrentItem(val) {\n      this.selectedItem$$.next(val);\n    }\n\n    changeCurrentFilterValue(val) {\n      this.filteringValue$$.next(val);\n    }\n\n    changeCurrentSortState(val) {\n      this.sortState$$.next(val);\n    }\n\n    changeCurrentSearchValue(val) {\n      this.searchValue$$.next(val);\n    }\n\n    getSearchResults$(val) {\n      return this.fetchSearchResults$(val).pipe(switchMap(response => {\n        const searchIds = getYTResponseItemsIdList(response);\n        return this.fetchResultStats(searchIds);\n      }), map(response => this.searchResults = response.items));\n    }\n\n    getSearchResults() {\n      return this.searchResults;\n    }\n\n    fetchSearchResults$(val) {\n      const urlForVideos = `${YOUTUBE_SEARCH_URL}?part=snippet&type=video&maxResults=12&q=${val}`;\n      return this.http.get(urlForVideos);\n    }\n\n    fetchResultStats(ids) {\n      const urlForStats = `${YOUTUBE_VIDEOS_URL}?id=${ids}&part=snippet,statistics`;\n      return this.http.get(urlForStats);\n    }\n\n    getSearchValue$() {\n      return this.searchValue$$.asObservable().pipe(filter(v => v.length > 2), debounceTime(700), distinctUntilChanged());\n    }\n\n    getOrder(sort) {\n      return sort === undefined || sort.order === 'desc' ? 'asc' : 'desc';\n    }\n\n    onSortButtonClick(type) {\n      let sort = this.sortState;\n      sort = {\n        type,\n        order: this.getOrder(sort)\n      };\n      this.sortState = sort;\n      this.changeCurrentSortState(this.sortState);\n    }\n\n    onFilterInputChange(inputValue = '') {\n      this.filterInput = inputValue;\n      this.changeCurrentFilterValue(this.filterInput);\n    }\n\n  }\n\n  SearchFormService.ɵfac = function SearchFormService_Factory(t) {\n    return new (t || SearchFormService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  SearchFormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SearchFormService,\n    factory: SearchFormService.ɵfac,\n    providedIn: 'root'\n  });\n  return SearchFormService;\n})();","map":null,"metadata":{},"sourceType":"module"}